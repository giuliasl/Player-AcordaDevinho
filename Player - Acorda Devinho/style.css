*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;/*o navegador não calcula a dimensão do elemento somando bordas e margens com altura e largura*/
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

body{
    background-color:#0F0D13;
}

body *{
    font-family: 'Roboto', sans-serif;
}


/*Definindo as áreas do container principal*/
#app{
    display: grid;
    grid-template-columns: max-content max-content;/*respeita o tamanho máximo do que ja existe dentro da div*/
    grid-template-areas: 
    'A B'
    'A C'
;
/*EXPLICAÇÃO DAS AREAS DO GRID: 
Tendo como visão de uma caixa, dentro dela há três componentes distindos que vão ocupar um espaço de área diferente. A área "A" vai ocupar um retangulo "em pé". A área "B" vai ocupar um quadrado ao lado da área A. A área "C" também ocupará um espaço ao lado da área A e abaixo da área B */

gap: 32px; /*usado para definir o espaçamento entre linhas e colunas. Nesse caso definirá o espaçamento das áreas defginidas como A, B e C. Quando há apenas um valor definido, ele será aplicado nas linhas e colunas em geral. Mas se houver mais de um valor definido, o primeiro valor definira as linhas e o segundo valor as colunas*/

place-content: center; /*centraliza todo o conteudo dentro da div*/
height: 100vh; /*vh são objetos que são "visiveis" no espaço do escopo do modelo, iguala os valores, recomendado em dimensionamento de área*/
}

/*Definindo as áreas dos containers*/

/*PLAYER 1*/
#player1{
    grid-area: A;
    padding: 50px 38px; /*preenchimentos internos - 50 para altura e 38 para largura*/
}

#player1 img{
    width: 190px;
    height: 190px;
    object-fit: cover; /*especifica como o conteudo deve ser ajustado à caixa estabelecida pela altura e largura*/
    border-radius: 6px;
}

#player1 .wrapper{
    width: 190px;
}

.info h1{
    font-size: 24px;
    margin-bottom: 9.6px;
}

.info{
    color: #E1E1E6;
    gap: 9.6px;
}

.info p{
    opacity: 0.67;
    font-size: 19px;
}

#player1 .info{
    margin-top: 28px;
}

.track1{
    margin-top:20px;
}


/*PLAYER 2*/
#player2{
    grid-area: B;
    height: fit-content;
}

/*PLAYER 3*/
#player3{
    grid-area: C;
}

/*PLAYERS GERAL*/
.player{
    background-color: #2A2141;
    padding: 28px;
    border-radius: 10px;
}

.player img{
    width: 84px;
    height: 84px;
    object-fit: cover; /*especifica como o conteudo deve ser ajustado à caixa estabelecida pela altura e largura*/
    border-radius: 6px;
}

.info-wrapper{
    display: flex;
    gap: 28px;
    align-items: center;
}

/*CONTROLES*/
.controls{
    display: flex; /*elementos ficam lado a lado*/
    justify-content: space-between; /*espaço entre os elementos*/
    margin-top:28px;
}

.horizontal .controls{
    padding-inline: 58px;
}

/*TRACK TIME*/
.time{
    font-size:14px;
    color:#C4C4CC;
    opacity: 0.7px;
    display: flex;
    justify-content: space-between;
    margin-top: 9.6px;
}

.track{
    position: relative;
}

/* :: caracteriza os pseudo-elements, criam elementos no html diretamente pelo css*/
.track::before{
    content: ''; /*todo elemento precisa estar dentro de uma caixa, um conteudo, mesmo que vazio*/
    height: 6px;
    width: 100%;
    display: block;
    background: #D9D9D9;
    opacity: 0.3;
    border-radius: 10px;
    position: absolute;
}

.track::after{
    content: '';
    height: 6px;
    width: 80%;
    display: block;
    background: #D9D9D9;
    opacity: 0.8;
    border-radius: 10px;
}


/*RESPONSIVIDADE*/
@media (max-width: 670px){

    #app{
        display: flex;
        flex-direction: column;
        max-width: 270px;
        margin: auto;
        padding-block: 60px;
    }

    .horizontal .controls{
        padding-inline: 30px;
    }


}